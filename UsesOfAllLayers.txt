1. Controller Layer (Entry Point)

This is the layer that handles incoming HTTP requests (GET, POST, PUT, DELETE).
It acts as a bridge between the client (frontend/Postman) and the application.
It should be kept thin, only responsible for routing and delegating tasks to the service layer.
Annotated with @RestController.

2. Service Layer (Business Logic)

This layer contains the actual business logic of the application.
It processes data, handles validation, combines results, and calls one or more repositories.
Helps maintain clean code by keeping the logic separate from the controller and repository.
Annotated with @Service.

3. Repository Layer (Data Access)

This layer communicates directly with the database.
It uses Spring Data JPA to interact with tables through methods like save(), findById(), deleteById(), etc.
Spring Boot auto-generates implementation at runtime.
Annotated with @Repository or simply by extending JpaRepository.

4. Entity Layer (Database Model)

Each class in this layer represents a table in the database.
It maps class fields to columns using JPA annotations like @Entity, @Id, etc.
These objects are used throughout the application to represent data in and out of the database.

5. Flow of a Typical CRUD Operation

The client (Postman or frontend) sends a request to the controller.
The controller forwards the request to the service.
The service processes the data and interacts with the repository.
The repository performs the database operation and returns the result.
The service may apply some logic and send the result back to the controller.
The controller sends the response back to the client in JSON format.

6. Why This Layered Approach is Useful in Real Projects

Promotes separation of concerns.
Makes unit testing and mocking easier.
Improves code readability and maintainability.
Scales better as the application grows.
Professional and industry-standard architecture.

7. RESTful Principles Used

Each HTTP method maps to a CRUD operation:
GET → Read
POST → Create
PUT → Update
DELETE → Delete
URLs are resource-based (e.g., /api/interviews/1)
Stateless communication using HTTP protocol
JSON is used for both input and output